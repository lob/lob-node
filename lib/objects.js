// Generated by CoffeeScript 1.6.3
(function() {
  var Objects, fs,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  fs = require("fs");

  module.exports = Objects = (function(_super) {
    __extends(Objects, _super);

    function Objects(api) {
      this.api = api;
      this.path = "objects";
      this;
    }

    Objects.prototype.create = function(_object, callback) {
      if (_object.file !== undefined) {
        if ("@" === _object.file.substr(0, 1)) {
          _object.file = fs.createReadStream(_object.file.substr(1));
          this.api.request("POST_FORM", this.path, _object, callback);
        } else {
          this.api.request("POST", this.path, _object, callback);
        }
      } else {
        this.api.request("POST", this.path, _object, callback);
      }
      return this;
    };

    Objects.prototype["delete"] = function(_id, callback) {
      if (typeof _id !== "string") {
        if (typeof _id === "function") {
          callback = _id;
        }
        if (typeof callback === "function") {
          callback("ID can not be empty for this operation", null);
        } else {
          throw new Error("ID can not be empty for this operation, Callback is empty");
        }
        return this;
      } else {
        this.api.request("DELETE", "" + this.path + "/" + _id, {}, callback);
        return this;
      }
    };

    return Objects;

  })(require("./common"));

}).call(this);
