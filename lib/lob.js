// Generated by CoffeeScript 1.6.3
(function() {
  var Main, USER_AGENT, addresses, bank_accounts, checks, jobs, objects, packagings, postcards, request, services, settings, utils;

  request = require("request");

  jobs = require("./jobs");

  addresses = require("./addresses");

  objects = require("./objects");

  settings = require("./settings");

  packagings = require("./packagings");

  services = require("./services");

  postcards = require("./postcards");

  checks = require("./checks");

  bank_accounts = require("./bank_accounts");

  utils = require("./utils");

  USER_AGENT = "LOB/node.js wrapper/1.0.0";

  module.exports = Main = (function() {
    function Main(config) {
      if (typeof config === "string") {
        this.config = {
          endpoint: "https://api.lob.com/v1/",
          key: config
        };
      } else if (typeof config === "object" && (config.key != null)) {
        this.config = {
          endpoint: config.endpoint != null ? config.endpoint : "https://api.lob.com/v1/",
          key: config.key != null ? config.key : null
        };
      } else {
        throw new Error("API Key must be set");
      }
      this.jobs = new jobs(this);
      this.addresses = new addresses(this);
      this.objects = new objects(this);
      this.settings = new settings(this);
      this.packagings = new packagings(this);
      this.services = new services(this);
      this.postcards = new postcards(this);
      this.checks = new checks(this);
      this.bankAccounts = new bank_accounts(this);
      this.utils = new utils(this);
    }

    Main.prototype.request = function(method, path, data, callback) {
      var form, r, request_object;
      method = method.toUpperCase();
      request_object = {
        method: method.split("_")[0],
        uri: "" + this.config.endpoint + path,
        headers: {
          "Accept": "application/json",
          "Connection": "close",
          "User-Agent": USER_AGENT
        },
        auth: {
          user: this.config.key,
          pass: ":"
        }
      };
      if (typeof data === "function") {
        callback = data;
      } else if (method === "GET") {
        request_object.qs = data;
      } else if (method === "POST") {
        request_object.form = data;
      }
      r = request(request_object, function(err, res, body) {
        body = JSON.parse(body);
        if ((body.errors != null) && err === null) {
          err = body.errors;
          delete body.errors;
        }
        callback(err, body);
        return this;
      });
      if (method === "POST_FORM") {
        form = r.form();
        Object.keys(data).forEach(function(_k) {
          if(data[_k] instanceof Object && _k !== 'front' && _k !== 'back') {
            Object.keys(data[_k]).forEach(function (key) {
              form.append(_k + '[' + key + ']', data[_k][key]);
            });
          } else if (data[_k] instanceof Buffer) {
            var options = {
              filename: _k + '.pdf'
            }
            form.append(_k, data[_k], options);
          } else {
            form.append(_k, data[_k]);
          }
        });
        return this;
      }
    };

    return Main;

  })();

}).call(this);
